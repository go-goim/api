syntax = "proto3";

package api.user.friend.v1;

import "message/v1/message.proto";
import "transport/response/response.proto";
import "validate/validate.proto";

option go_package = "github.com/go-goim/api/user/friend/v1";

message Friend {
  int64 uid = 1;
  int64 friend_uid = 2;
  string friend_name = 3;
  string friend_avatar = 4;
  FriendStatus status = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
}

enum FriendStatus {
  // Friend as default status
  FRIEND = 0;
  // Stranger when delete friend
  STRANGER = 1;
  // Blocked when block friend
  BLOCKED = 2;
  // Unblock when unblock friend
  // unblock status won't be in database only use when update friend status
  UNBLOCKED = 3;
}

message UpdateFriendStatusRequest {
  BaseFriendRequest info = 1;
  FriendStatus status = 2;
}

message GetFriendResponse {
  transport.response.BaseResponse response = 1;
  Friend friend = 2;
}

message QueryFriendListRequest {
  int64 uid = 1 [(validate.rules).int64 = {
    gt: 0
  }];
}

message QueryFriendListResponse {
  transport.response.BaseResponse response = 1;
  repeated Friend friend_list = 2;
}

/*
 * FriendRequest
*/

// FriendRequest is the request data for adding friend
message FriendRequest {
  uint64 id = 1;
  int64 uid = 2;
  int64 friend_uid = 3;
  FriendRequestStatus status = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
  // friend info for view
  string friend_name = 7;
  string friend_avatar = 8;
}

enum FriendRequestStatus {
  // Friend request as default status
  REQUESTED = 0;
  // Friend request as accepted
  ACCEPTED = 1;
  // Friend request as rejected
  REJECTED = 2;
}

message BaseFriendRequest {
  int64 uid = 1 [(validate.rules).int64 = {
    gt: 0
  }];
  int64 friend_uid = 2 [(validate.rules).int64 = {
    gt: 0
  }];
}

message AddFriendResponse {
  transport.response.BaseResponse response = 1;
  AddFriendResult result = 2;
}

message AddFriendResult {
  AddFriendStatus status = 1;
  FriendRequest friend_request = 2;
}

enum AddFriendStatus {
  SEND_REQUEST_SUCCESS = 0;
  ALREADY_SENT_REQUEST = 1;
  ADD_FRIEND_SUCCESS = 2;
  BLOCKED_BY_ME = 3;
  BLOCKED_BY_FRIEND = 4;
}

message ConfirmFriendRequestRequest {
  int64 uid = 1 [(validate.rules).int64 = {
    gt: 0
  }];
  uint64 friend_request_id = 2 [(validate.rules).uint64.gt = 0];
  ConfirmFriendRequestAction action = 3 [(validate.rules).enum.defined_only = true];
}

enum ConfirmFriendRequestAction {
  ACCEPT = 0; // accept friend request
  REJECT = 1; // reject friend request
}

message GetFriendRequestResponse {
  transport.response.BaseResponse response = 1;
  FriendRequest friend_request = 2;
}

message QueryFriendRequestListRequest {
  int64 uid = 1 [(validate.rules).int64 = {
    gt: 0
  }];
  FriendRequestStatus status = 2 [(validate.rules).enum.defined_only = true];
}

message QueryFriendRequestListResponse {
  transport.response.BaseResponse response = 1;
  repeated FriendRequest friend_request_list = 2;
}

// CheckSendMessageAbilityRequest is the request data for checking send message ability.
message CheckSendMessageAbilityRequest {
  int64 from_uid = 1 [(validate.rules).int64 = {
    gt: 0
  }];
  int64 to_uid = 2 [(validate.rules).int64 = {
    gt: 0
  }];
  api.message.v1.SessionType session_type = 3;
}

message CheckSendMessageAbilityResponse {
  transport.response.BaseResponse response = 1;
  optional string session_id = 2;
}

service FriendService {
  // friend request
  rpc AddFriend(BaseFriendRequest) returns (AddFriendResponse);
  rpc ConfirmFriendRequest(ConfirmFriendRequestRequest) returns (transport.response.BaseResponse);
  rpc GetFriendRequest(BaseFriendRequest) returns (GetFriendRequestResponse);
  rpc QueryFriendRequestList(QueryFriendRequestListRequest) returns (QueryFriendRequestListResponse);

  // friend
  rpc UpdateFriendStatus(UpdateFriendStatusRequest) returns (transport.response.BaseResponse);
  rpc IsFriend(BaseFriendRequest) returns (transport.response.BaseResponse);
  rpc GetFriend(BaseFriendRequest) returns (GetFriendResponse);
  rpc QueryFriendList(QueryFriendListRequest) returns (QueryFriendListResponse);
  // check send message ability
  // check friend relationship and is there a session. If is friend but no session, try to create a session.
  // if session_type is group chat, check if the group is exist and is the member of the group.
  rpc CheckSendMessageAbility(CheckSendMessageAbilityRequest) returns (CheckSendMessageAbilityResponse);
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: message/v1/message.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PushMessageService_PushMessage_FullMethodName = "/api.message.v1.PushMessageService/PushMessage"
)

// PushMessageServiceClient is the client API for PushMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushMessageServiceClient interface {
	PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*PushMessageResp, error)
}

type pushMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushMessageServiceClient(cc grpc.ClientConnInterface) PushMessageServiceClient {
	return &pushMessageServiceClient{cc}
}

func (c *pushMessageServiceClient) PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*PushMessageResp, error) {
	out := new(PushMessageResp)
	err := c.cc.Invoke(ctx, PushMessageService_PushMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushMessageServiceServer is the server API for PushMessageService service.
// All implementations must embed UnimplementedPushMessageServiceServer
// for forward compatibility
type PushMessageServiceServer interface {
	PushMessage(context.Context, *PushMessageReq) (*PushMessageResp, error)
	mustEmbedUnimplementedPushMessageServiceServer()
}

// UnimplementedPushMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushMessageServiceServer struct {
}

func (UnimplementedPushMessageServiceServer) PushMessage(context.Context, *PushMessageReq) (*PushMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedPushMessageServiceServer) mustEmbedUnimplementedPushMessageServiceServer() {}

// UnsafePushMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushMessageServiceServer will
// result in compilation errors.
type UnsafePushMessageServiceServer interface {
	mustEmbedUnimplementedPushMessageServiceServer()
}

func RegisterPushMessageServiceServer(s grpc.ServiceRegistrar, srv PushMessageServiceServer) {
	s.RegisterService(&PushMessageService_ServiceDesc, srv)
}

func _PushMessageService_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushMessageServiceServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushMessageService_PushMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushMessageServiceServer).PushMessage(ctx, req.(*PushMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PushMessageService_ServiceDesc is the grpc.ServiceDesc for PushMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.PushMessageService",
	HandlerType: (*PushMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMessage",
			Handler:    _PushMessageService_PushMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/v1/message.proto",
}

const (
	OfflineMessageService_QueryOfflineMessage_FullMethodName = "/api.message.v1.OfflineMessageService/QueryOfflineMessage"
	OfflineMessageService_ConfirmLastMstID_FullMethodName    = "/api.message.v1.OfflineMessageService/ConfirmLastMstID"
)

// OfflineMessageServiceClient is the client API for OfflineMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineMessageServiceClient interface {
	QueryOfflineMessage(ctx context.Context, in *QueryOfflineMessageReq, opts ...grpc.CallOption) (*QueryOfflineMessageResp, error)
	ConfirmLastMstID(ctx context.Context, in *ConfirmLastMsgIDReq, opts ...grpc.CallOption) (*ConfirmLastMsgIDResp, error)
}

type offlineMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineMessageServiceClient(cc grpc.ClientConnInterface) OfflineMessageServiceClient {
	return &offlineMessageServiceClient{cc}
}

func (c *offlineMessageServiceClient) QueryOfflineMessage(ctx context.Context, in *QueryOfflineMessageReq, opts ...grpc.CallOption) (*QueryOfflineMessageResp, error) {
	out := new(QueryOfflineMessageResp)
	err := c.cc.Invoke(ctx, OfflineMessageService_QueryOfflineMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMessageServiceClient) ConfirmLastMstID(ctx context.Context, in *ConfirmLastMsgIDReq, opts ...grpc.CallOption) (*ConfirmLastMsgIDResp, error) {
	out := new(ConfirmLastMsgIDResp)
	err := c.cc.Invoke(ctx, OfflineMessageService_ConfirmLastMstID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineMessageServiceServer is the server API for OfflineMessageService service.
// All implementations must embed UnimplementedOfflineMessageServiceServer
// for forward compatibility
type OfflineMessageServiceServer interface {
	QueryOfflineMessage(context.Context, *QueryOfflineMessageReq) (*QueryOfflineMessageResp, error)
	ConfirmLastMstID(context.Context, *ConfirmLastMsgIDReq) (*ConfirmLastMsgIDResp, error)
	mustEmbedUnimplementedOfflineMessageServiceServer()
}

// UnimplementedOfflineMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfflineMessageServiceServer struct {
}

func (UnimplementedOfflineMessageServiceServer) QueryOfflineMessage(context.Context, *QueryOfflineMessageReq) (*QueryOfflineMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOfflineMessage not implemented")
}
func (UnimplementedOfflineMessageServiceServer) ConfirmLastMstID(context.Context, *ConfirmLastMsgIDReq) (*ConfirmLastMsgIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLastMstID not implemented")
}
func (UnimplementedOfflineMessageServiceServer) mustEmbedUnimplementedOfflineMessageServiceServer() {}

// UnsafeOfflineMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineMessageServiceServer will
// result in compilation errors.
type UnsafeOfflineMessageServiceServer interface {
	mustEmbedUnimplementedOfflineMessageServiceServer()
}

func RegisterOfflineMessageServiceServer(s grpc.ServiceRegistrar, srv OfflineMessageServiceServer) {
	s.RegisterService(&OfflineMessageService_ServiceDesc, srv)
}

func _OfflineMessageService_QueryOfflineMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOfflineMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMessageServiceServer).QueryOfflineMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfflineMessageService_QueryOfflineMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMessageServiceServer).QueryOfflineMessage(ctx, req.(*QueryOfflineMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMessageService_ConfirmLastMstID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmLastMsgIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMessageServiceServer).ConfirmLastMstID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfflineMessageService_ConfirmLastMstID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMessageServiceServer).ConfirmLastMstID(ctx, req.(*ConfirmLastMsgIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OfflineMessageService_ServiceDesc is the grpc.ServiceDesc for OfflineMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfflineMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.OfflineMessageService",
	HandlerType: (*OfflineMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOfflineMessage",
			Handler:    _OfflineMessageService_QueryOfflineMessage_Handler,
		},
		{
			MethodName: "ConfirmLastMstID",
			Handler:    _OfflineMessageService_ConfirmLastMstID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/v1/message.proto",
}

const (
	HistoryMessageService_QuerySessionHistoryMessage_FullMethodName = "/api.message.v1.HistoryMessageService/QuerySessionHistoryMessage"
	HistoryMessageService_SyncHistoryMessage_FullMethodName         = "/api.message.v1.HistoryMessageService/SyncHistoryMessage"
)

// HistoryMessageServiceClient is the client API for HistoryMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryMessageServiceClient interface {
	QuerySessionHistoryMessage(ctx context.Context, in *QuerySessionHistoryMessageReq, opts ...grpc.CallOption) (*QuerySessionHistoryMessageResp, error)
	SyncHistoryMessage(ctx context.Context, in *SyncHistoryMessageReq, opts ...grpc.CallOption) (*SyncHistoryMessageResp, error)
}

type historyMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryMessageServiceClient(cc grpc.ClientConnInterface) HistoryMessageServiceClient {
	return &historyMessageServiceClient{cc}
}

func (c *historyMessageServiceClient) QuerySessionHistoryMessage(ctx context.Context, in *QuerySessionHistoryMessageReq, opts ...grpc.CallOption) (*QuerySessionHistoryMessageResp, error) {
	out := new(QuerySessionHistoryMessageResp)
	err := c.cc.Invoke(ctx, HistoryMessageService_QuerySessionHistoryMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyMessageServiceClient) SyncHistoryMessage(ctx context.Context, in *SyncHistoryMessageReq, opts ...grpc.CallOption) (*SyncHistoryMessageResp, error) {
	out := new(SyncHistoryMessageResp)
	err := c.cc.Invoke(ctx, HistoryMessageService_SyncHistoryMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryMessageServiceServer is the server API for HistoryMessageService service.
// All implementations must embed UnimplementedHistoryMessageServiceServer
// for forward compatibility
type HistoryMessageServiceServer interface {
	QuerySessionHistoryMessage(context.Context, *QuerySessionHistoryMessageReq) (*QuerySessionHistoryMessageResp, error)
	SyncHistoryMessage(context.Context, *SyncHistoryMessageReq) (*SyncHistoryMessageResp, error)
	mustEmbedUnimplementedHistoryMessageServiceServer()
}

// UnimplementedHistoryMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryMessageServiceServer struct {
}

func (UnimplementedHistoryMessageServiceServer) QuerySessionHistoryMessage(context.Context, *QuerySessionHistoryMessageReq) (*QuerySessionHistoryMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySessionHistoryMessage not implemented")
}
func (UnimplementedHistoryMessageServiceServer) SyncHistoryMessage(context.Context, *SyncHistoryMessageReq) (*SyncHistoryMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncHistoryMessage not implemented")
}
func (UnimplementedHistoryMessageServiceServer) mustEmbedUnimplementedHistoryMessageServiceServer() {}

// UnsafeHistoryMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryMessageServiceServer will
// result in compilation errors.
type UnsafeHistoryMessageServiceServer interface {
	mustEmbedUnimplementedHistoryMessageServiceServer()
}

func RegisterHistoryMessageServiceServer(s grpc.ServiceRegistrar, srv HistoryMessageServiceServer) {
	s.RegisterService(&HistoryMessageService_ServiceDesc, srv)
}

func _HistoryMessageService_QuerySessionHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySessionHistoryMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryMessageServiceServer).QuerySessionHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryMessageService_QuerySessionHistoryMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryMessageServiceServer).QuerySessionHistoryMessage(ctx, req.(*QuerySessionHistoryMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryMessageService_SyncHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncHistoryMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryMessageServiceServer).SyncHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryMessageService_SyncHistoryMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryMessageServiceServer).SyncHistoryMessage(ctx, req.(*SyncHistoryMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryMessageService_ServiceDesc is the grpc.ServiceDesc for HistoryMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.HistoryMessageService",
	HandlerType: (*HistoryMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuerySessionHistoryMessage",
			Handler:    _HistoryMessageService_QuerySessionHistoryMessage_Handler,
		},
		{
			MethodName: "SyncHistoryMessage",
			Handler:    _HistoryMessageService_SyncHistoryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/v1/message.proto",
}

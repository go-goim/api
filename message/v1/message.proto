syntax = "proto3";

package api.message.v1;

import "google/protobuf/timestamp.proto";
import "errors/errors.proto";
import "validate/validate.proto";

option go_package = "github.com/go-goim/api/message/v1";

enum MessageContentType {
  Text = 0;
  Image = 1;
  Voice = 2;
}

// define session type and status
enum SessionType {
  SingleChat = 0;
  GroupChat = 1;
  // broadcast actually not a standard chat type, but we still use it here
  Broadcast = 2;
  // Channel is for user subscribed channel msgs
  Channel = 3;
  // 255 at most
}

enum MessageStatus {
  Normal = 0;
  Deleted = 1;
}

// SendMessageReq receive data from gateway
message SendMessageReq {
  int64 from = 1 [(validate.rules).int64.gt = 0];
  int64 to = 2 [(validate.rules).int64.gt = 0];
  SessionType session_type = 3;
  optional string session_id = 4;
  MessageContentType content_type = 5 [(validate.rules).enum.defined_only = true];
  string content = 6 [(validate.rules).string = {
    min_len: 1,
    max_len: 4096
  }];
}

// Message is definition of message
message Message {
  int64 msg_id = 1;
  int64 from = 2;
  int64 to = 3; //  user id or group id or room id etc.
  SessionType session_type = 4;
  string session_id = 5;
  MessageContentType content_type = 6;
  string content = 7;
  int64 create_time = 8;
}

// PushMessage use for push a message to persistence connection server
message PushMessageReq {
  Message message = 1;
  // ToUsers is a list of user id who receive this message
  repeated int64 to_users = 2;
}

message PushMessageResp {
  errors.Error error = 1;
  repeated int64 failed_users = 2;
}

service PushMessageService {
  rpc PushMessage(PushMessageReq) returns (PushMessageResp);
}

message QueryOfflineMessageReq {
  int64 uid = 1 [(validate.rules).int64.gt = 0];
  int64 last_msg_id = 2 [(validate.rules).int64.gt = 0];
  bool onlyCount = 3;
  int32 page = 4;
  int32 page_size = 5 [(validate.rules).int32 = {
    gte: 1,
    lte: 100
  }];
}

message QueryOfflineMessageResp {
  errors.Error error = 1;
  int32 total = 2;
  repeated Message messages = 3;
}

message ConfirmLastMsgIDReq {
  int64 uid = 1 [(validate.rules).int64.gt = 0];
  int64 last_msg_id = 2 [(validate.rules).int64.gt = 0];
}

message ConfirmLastMsgIDResp {
  errors.Error error = 1;
  int64 last_msg_id = 2;
}

service OfflineMessageService {
  rpc QueryOfflineMessage(QueryOfflineMessageReq) returns (QueryOfflineMessageResp);
  rpc ConfirmLastMstID(ConfirmLastMsgIDReq) returns (ConfirmLastMsgIDResp);
}

// storage message
message StorageMessage {
  int64 msgID = 1;
  string sessionID = 2;
  SessionType session_type = 3;
  int64 fromID = 4;
  int64 toID = 5;
  message Content {
    MessageContentType contentType = 1;
    string content = 2;
  }
  Content content = 6;
  google.protobuf.Timestamp createTime = 7;
  MessageStatus status = 8;
}

// HistoryMessage

message QuerySessionHistoryMessageReq {
  int64 uid = 1 [(validate.rules).int64.gt = 0];
  string session_id = 2;
  int64 last_msg_id = 3 [(validate.rules).int64.gt = 0];
  int32 page = 4;
  int32 page_size = 5 [(validate.rules).int32 = {
    gte: 1,
    lte: 100
  }];
}

message QuerySessionHistoryMessageResp {
  errors.Error error = 1;
  int32 total = 2;
  repeated Message messages = 3;
}


message SyncHistoryMessageReq {
  int64 uid = 1 [(validate.rules).int64.gt = 0];
  int64 last_msg_id = 2 [(validate.rules).int64.gt = 0];
  int32 page = 3;
  int32 page_size = 4 [(validate.rules).int32 = {
    gte: 1,
    lte: 100
  }];
}

message SyncHistoryMessageResp {
  errors.Error error = 1;
  int32 total = 2;
  repeated Message messages = 3;
}


service HistoryMessageService {
  rpc QuerySessionHistoryMessage(QuerySessionHistoryMessageReq) returns (QuerySessionHistoryMessageResp);
  rpc SyncHistoryMessage(SyncHistoryMessageReq) returns (SyncHistoryMessageResp);
}

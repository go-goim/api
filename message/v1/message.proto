syntax = "proto3";

package api.message.v1;

import "transport/response/response.proto";
import "user/session/v1/session.proto";
import "validate/validate.proto";

option go_package = "github.com/go-goim/api/message/v1";

enum MessageContentType {
  Text = 0;
  Image = 1;
  Voice = 2;
}

// SendMessageReq receive data from gateway
message SendMessageReq {
  string from = 1 [(validate.rules).string.min_len = 20];
  string to = 2 [(validate.rules).string.min_len = 20];
  user.session.v1.SessionType session_type = 3;
  optional string session_id = 4;
  MessageContentType content_type = 5 [(validate.rules).enum.defined_only = true];
  string content = 6 [(validate.rules).string = {
    min_len: 1,
    max_len: 4096
  }];
}

// SendMessageResp is response body for sendMessage
message SendMessageResp {
  int64 session_id = 2;
  int64 msg_id = 3;
}

// Message is definition of message
message Message {
  int64 msg_id = 1;
  string from = 2;
  string to = 3; // to user id or group id
  user.session.v1.SessionType session_type = 4;
  int64 session_id = 5;
  MessageContentType content_type = 6;
  string content = 7;
  int64 create_time = 8;
}

// PushMessage use for push a message to persistence connection server
message PushMessageReq {
  Message message = 1;
  // ToUsers is a list of user id who receive this message
  repeated string to_users = 2;
}

message PushMessageResp {
  transport.response.BaseResponse response = 1;
  repeated string failed_users = 2;
}

service PushMessageService {
  rpc PushMessage(PushMessageReq) returns (PushMessageResp);
}

message QueryOfflineMessageReq {
  string user_id = 1 [(validate.rules).string.min_len = 20];
  int64 last_msg_id = 2 [(validate.rules).int64.gt = 0];
  bool onlyCount = 3;
  int32 page = 4;
  int32 page_size = 5 [(validate.rules).int32 = {
    gte: 1,
    lte: 100
  }];
}

message QueryOfflineMessageResp {
  transport.response.BaseResponse response = 1;
  int32 total = 2;
  repeated Message messages = 3;
}

service OfflineMessageService {
  rpc QueryOfflineMessage(QueryOfflineMessageReq) returns (QueryOfflineMessageResp);
}
